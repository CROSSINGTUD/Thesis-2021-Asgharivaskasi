package java.jca

entity KeyStore {
    
    var fileInput;
    
    var passwordIn;
    var passwordOut;
    var passwordKey;
    
    var entry;
    var byteKey;
    var paramLoad;
    var protParamGet;
    var protParamSet;
    
    var aliasGet;
    var aliasSet;
    var fileOutput;
    var paramStore;
    var keyStoreAlgorithm;
    var cert;
    
    var key;
    var alias;
    
    
    op instantiate {
    	java.security.KeyStore.getInstance(
            keyStoreAlgorithm : java.ang.String
        );
        java.security.KeyStore.getInstance(
            keyStoreAlgorithm : java.ang.String,
            _
        );
    }
    
    op load{
    	java.security.KeyStore.load(
    		fileInput: java.io.InputStream,
    		passwordIn: char[]
    	);
    	java.security.KeyStore.load(
    		paramLoad: java.security.KeyStore.LoadStoreParameter
    	);
    }
    
    op store {
        java.security.KeyStore.store(
            paramStore : java.security.KeyStore.LoadStoreParameter
        );
        java.security.KeyStore.store(
            fileOutput : java.io.OutputStream,
            passwordOut: char[]
        );
    }
    op setEntry{
    	java.security.KeyStore.setEntry(
            aliasSet : java.lang.String,
            entry : java.security.KeyStore.Entry,
            protParamSet : java.security.KeyStore.ProtectionParameter
        );
    }
    op getEntry{
    	java.security.KeyStore.getEntry(
            aliasGet : java.lang.String,
            protParamGet : java.security.KeyStore.ProtectionParameter
        );
    }
	op getKey{
		    key = java.security.KeyStore.getKey(
            alias : java.lang.String,
            passwordKey : char[]
        );
	}
}// ensure constraint req
