package java.bcjca

rule BCProvider_SecretKeyFactory_order{
	using
		SecretKeyFactory as skf
	ensure
		order
			skf.instantiate(),
			skf.generate()
	onfail
		InvalidOrderOfSecretKeyFactory
}
//constraints
rule BCProvider_SecretKeyFactory_algorithm{
	using
		SecretKeyFactory as skf
	when 
		_has_value(skf.algorithm)
	ensure
		skf.algorithm in ["AES", "PBKDF2", "PBKDF2WithHmacSHA256", "PBKDF2WithHmacSHA384", "PBKDF2WithHmacSHA512",
				"PBKDF2WITHHMACSHA3-256", "PBKDF2WITHHMACSHA3-384", "PBKDF2WITHHMACSHA3-512",
				"PBEWithSHA256And192BitAES-CBC-BC", "PBEWithSHA256And256BitAES-CBC-BC", "Camellia", 
				"PBEwithSHAandTwofish-CBC"]
	onfail
		InvalidalgorithmOfSecretKeyFactory
}
//requires
//does not work
rule BCProvider_SecretKeyFactory_speccedkey{
	using
		SecretKeyFactory as skf,
		SecretKeySpec as sks,
		X509EncodedKeySpec as x509,		
		PBEKeySpec as pbeks
	when
		_has_value(skf.keySpec)
	ensure	 
		_is(akf.keySpec, sks) || _is(akf.keySpec, x509) || _is(akf.keySpec, pbeks)
	onfail
		InvalidkeyKeySpecOfSecretKeyFactory
}
//negate
//rule BCProvider_SecretKeyFactory_negspeccedkey{
//	using
//		SecretKeyFactory as skf,
//		PBEKeySpec as pbeks
//	when
//		_has_value(skf.keySpec) && pbeks.clear()
//	ensure
//		!(_is(akf.keySpec, pbeks))
//	onfail
//		InvalidnegatedkeyKeySpecOfSecretKeyFactory
//}