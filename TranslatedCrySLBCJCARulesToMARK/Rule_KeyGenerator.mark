package java.bcjca

rule BCProvider_KeyGenerator_order{
	using
		KeyGenerator as kg
	ensure
		order
			kg.instantiate(),
			kg.init()?,
			kg.generate()
	onfail
		InvalidOrderOfKeyGenerator
}
//constraints
rule BCProvider_KeyGenerator_algorithm{
	using
		KeyGenerator as kg
	when 
		_has_value(kg.algorithm)
	ensure
		kg.algorithm in ["AES", "HmacSHA224", "HmacSHA256", "HmacSHA384", "HmacSHA512", "HMACSHA3-224", "HMACSHA3-256", "HMACSHA3-384", "HMACSHA3-512",
				"Poly1305-AES", "Poly1305-Camellia", "Camellia", "ChaCha", 
				"ChaCha7539", "Poly1305", "Rijndael", "Salsa20", "Serpent", "Tnepres", "Poly1305-Serpent", "SHACAL-2", "Shacal2", 
				"Twofish", "Poly1305-Twofish", "XSalsa20"]
	onfail
		InvalidSecretKeyAlgorithmOfKeyGenerator
}
rule BCProvider_KeyGenerator_keysize{
	using
		KeyGenerator as kg
	when
		kg.algorithm in ["AES", "Poly1305-Camellia", "Camellia", "ChaCha", "Salsa20", "SHACAL-2", "Shacal2",
				"Rijndael", "Serpent", "Tnepres", "ChaCha7539", "Poly1305", "Poly1305-Serpent", 
				"Twofish", "Poly1305-Twofish", "XSalsa20"] && _has_value(kg.keysize)
	ensure
		kg.keysize in [128, 192, 256]
	onfail
		InvalidKeySizeOfKeyGenerator
}
//requires
rule BCProvider_KeyGenerator_randomized{
	using
		KeyGenerator as kg,
		SecureRandom as sr
	when
		_has_value(kg.random)
	ensure
		_is(kg.random, sr)
	onfail
		NotRandomranGenOfKeyGenerator
}