package java.bcjca

rule BCProvider_KeyStore_order{
	using
		KeyStore as ks
	ensure
		order
			ks.instantiate(),
			ks.load(),
			((ks.getEntry()?, ks.getKey()) | (ks.setEntry(), ks.store()))*
	onfail
		InvalidOrderOfKeyStore
}
//constraints
rule BCProvider_KeyStore_type{
	using
		KeyStore as ks
	when 
		_has_value(ks.type)
	ensure
		ks.type in ["BCFKS", "BCFKS-DEF", "IBCFKS", "IBCFKS-DEF"]
	onfail
		InvalidAlgorithmOfKeyStore
}
rule BCProvider_KeyStore_passin{
	using
		KeyStore as ks
	when
		_has_value(ks.passwordIn)
	ensure
		!(_is_instance(ks.passwordIn, "java.lang.String"))
		
	onfail
		PasswordInMustNoTBeOfTypeStringInKeyStore
}
rule BCProvider_KeyStore_passout{
	using
		KeyStore as ks
	when 
		_has_value(ks.passwordOut)
	ensure
		!(_is_instance(ks.passwordOut, "java.lang.String"))
	onfail
		PasswordOutMustNoTBeOfTypeStringInKeyStore
}
rule BCProvider_KeyStore_passkey{
	using
		KeyStore as ks
	when 
		_has_value(ks.passwordKey)
	ensure
		!(_is_instance(ks.passwordKey, "java.lang.String"))
	onfail
		PasswordKeyMustNoTBeOfTypeStringInKeyStore
}
//nothardcoded cannot be implemented